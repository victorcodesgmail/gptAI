{"ast":null,"code":"var _jsxFileName = \"/home/boniface/Desktop/watched/gpt/src/components/cam/Cam.jsx\";\nimport React from 'react';\nimport './cam.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cam = () => {\n  const cameraFeed = document.getElementById('cameraFeed');\n  let isCameraFrozen = false; // Initialize a variable to track whether the camera is frozen.\n\n  navigator.mediaDevices.getUserMedia({\n    video: true\n  }).then(stream => {\n    cameraFeed.srcObject = stream;\n\n    // Add a click event listener to the video element to toggle freezing/unfreezing.\n    cameraFeed.addEventListener('click', () => {\n      if (isCameraFrozen) {\n        // If the camera is frozen, resume the video stream.\n        cameraFeed.play();\n        isCameraFrozen = false;\n      } else {\n        // If the camera is not frozen, pause the video stream.\n        cameraFeed.pause();\n        isCameraFrozen = true;\n      }\n    });\n  }).catch(error => {\n    console.error('Error accessing camera:', error);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"divv\",\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"cameraFeed\",\n      autoplay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 2\n  }, this);\n};\n_c = Cam;\nexport default Cam;\nvar _c;\n$RefreshReg$(_c, \"Cam\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Cam","cameraFeed","document","getElementById","isCameraFrozen","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","addEventListener","play","pause","catch","error","console","className","children","id","autoplay","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/boniface/Desktop/watched/gpt/src/components/cam/Cam.jsx"],"sourcesContent":["import React from 'react'\nimport './cam.css'\n\nconst Cam = () => {\n    const cameraFeed = document.getElementById('cameraFeed');\nlet isCameraFrozen = false; // Initialize a variable to track whether the camera is frozen.\n\nnavigator.mediaDevices.getUserMedia({ video: true })\n  .then(stream => {\n    cameraFeed.srcObject = stream;\n\n    // Add a click event listener to the video element to toggle freezing/unfreezing.\n    cameraFeed.addEventListener('click', () => {\n      if (isCameraFrozen) {\n        // If the camera is frozen, resume the video stream.\n        cameraFeed.play();\n        isCameraFrozen = false;\n      } else {\n        // If the camera is not frozen, pause the video stream.\n        cameraFeed.pause();\n        isCameraFrozen = true;\n      }\n    });\n  })\n  .catch(error => {\n    console.error('Error accessing camera:', error);\n  });\n  return (\n\n <div className='divv'>\n<video id=\"cameraFeed\" autoplay>\n\n        </video>\n        </div>\n  )\n}\n\nexport default Cam"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EACd,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;EAC5D,IAAIC,cAAc,GAAG,KAAK,CAAC,CAAC;;EAE5BC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC,CACjDC,IAAI,CAACC,MAAM,IAAI;IACdT,UAAU,CAACU,SAAS,GAAGD,MAAM;;IAE7B;IACAT,UAAU,CAACW,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzC,IAAIR,cAAc,EAAE;QAClB;QACAH,UAAU,CAACY,IAAI,CAAC,CAAC;QACjBT,cAAc,GAAG,KAAK;MACxB,CAAC,MAAM;QACL;QACAH,UAAU,CAACa,KAAK,CAAC,CAAC;QAClBV,cAAc,GAAG,IAAI;MACvB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,CACDW,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD,CAAC,CAAC;EACF,oBAEDjB,OAAA;IAAKmB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACtBpB,OAAA;MAAOqB,EAAE,EAAC,YAAY;MAACC,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEhB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEd,CAAC;AAAAC,EAAA,GAhCK1B,GAAG;AAkCT,eAAeA,GAAG;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}